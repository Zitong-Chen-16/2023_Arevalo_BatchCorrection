'''Visualize model rankings'''
from functools import partial

import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objs as go


class Ranker:
    '''Class to generate scatter plot of multiple methods for scores'''

    def __init__(self, scores: pd.DataFrame, measure='mean', sortby_l2=True):
        '''Calculate central tendency of scores and sort methods by L2 norm for
        Bio and batch.  Scores are expected to have the format generated by
        explore_mad_sphering'''
        measures = scores.groupby(['model', 'dimension'],
                                  as_index=False).score.agg(measure)
        centers = measures.pivot(index='model',
                                 columns='dimension',
                                 values='score')
        if sortby_l2:
            centers['norm'] = centers.apply(np.linalg.norm, axis=1)
            ranklist = centers['norm'].sort_values(ascending=False).index
        else:
            ranklist = centers.T.mean().sort_values(ascending=False).index

        rankmap = dict(zip(ranklist, range(ranklist.size)))

        colors = dict(zip(ranklist, px.colors.qualitative.Plotly))
        centers['color'] = centers.index.map(colors)

        measures_batch = measures.query('dimension=="batch"').set_index(
            'model').score
        measures_bio = measures.query('dimension=="bio"').set_index(
            'model').score

        bio = scores[scores.dimension == 'bio'].copy()
        bio['x'] = bio['score']
        bio['y'] = bio.model.map(measures_batch)

        batch = scores[scores.dimension == 'batch'].copy()
        batch['x'] = batch.model.map(measures_bio)
        batch['y'] = batch['score']
        rank = pd.concat([bio, batch]).reset_index(drop=True)

        rank['rank'] = rank.model.map(rankmap)
        rank = rank.sort_values(by='rank')

        minmax = scores.groupby(['model', 'dimension']).score.agg([min, max])

        self.rank = rank
        self.ranklist = ranklist
        self.colors = colors
        self.centers = centers
        self.scores = scores
        self.minmax = minmax

    def _create_traces(self, model, row):
        x_min, x_max = self.minmax.loc[model, 'bio']
        y_min, y_max = self.minmax.loc[model, 'batch']
        scatter = partial(go.Scatter,
                          line={
                              'color': row['color'],
                              'width': 1,
                          },
                          legendgroup=model,
                          name=model,
                          hoverinfo='skip',
                          mode='lines',
                          showlegend=False)

        batch_line = scatter(x=[x_min, x_max], y=[row['batch'], row['batch']])
        bio_line = scatter(x=[row['bio'], row['bio']], y=[y_min, y_max])

        traces = batch_line, bio_line
        return traces

    def get_figure(self, default: str | list[str] | None = None):
        '''Plot Rank. Enable model with default '''

        fig = px.scatter(self.rank,
                         x='x',
                         y='y',
                         color='model',
                         symbol='model',
                         color_discrete_map=self.colors,
                         hover_data=['metric'],
                         height=600)
        fig = fig.update_traces(marker=dict(size=6),
                                selector=dict(mode='markers'))
        for model, row in self.centers.iterrows():
            traces = self._create_traces(model, row)
            fig.add_traces(traces)

        fig = fig.update_layout(yaxis_range=[0, 1], xaxis_range=[0, 1])

        # Enable default models
        if isinstance(default, str):
            default = [default]
        if default:
            fig = fig.update_traces(visible='legendonly')
            for model_name in default:
                fig = fig.update_traces(visible=True,
                                        selector=dict(name=model_name))
        fig.update_layout(xaxis_title="Bio",
                          yaxis_title="Batch",
                          font=dict(size=18),
                          legend_title_text='Method',
                          legend_itemsizing='constant'
                          )

        return fig

    @staticmethod
    def plot(scores: pd.DataFrame, default: str | None = None):
        '''Plot the given rank with a default method as visible. If default
        is None, then all methods are activated by default'''
        return Ranker(scores).get_figure(default)
